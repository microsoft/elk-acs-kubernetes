events {
  worker_connections 1024;
}

http {

  lua_package_path '~/lua/?.lua;;';

  resolver 8.8.8.8;

  lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
  lua_ssl_verify_depth 5;

  # cache for discovery metadata documents
  lua_shared_dict discovery 1m;

  # NB: if you have "lua_code_cache off;", use:
  # set $session_secret xxxxxxxxxxxxxxxxxxx;
  # see: https://github.com/bungle/lua-resty-session#notes-about-turning-lua-code-cache-off
  
  server {
    listen 80;

    location / {

      access_by_lua '

          local opts = {
             -- the full redirect URI must be protected by this script and becomes:
             -- ngx.var.scheme.."://"..ngx.var.http_host..opts.redirect_uri_path
             -- unless the scheme is overridden using opts.redirect_uri_scheme or an X-Forwarded-Proto header in the incoming request
             redirect_uri_path = "/callback",
             discovery = "https://login.microsoftonline.com/${TENANT}/.well-known/openid-configuration",
             client_id = "${CLIENT_ID}",
             client_secret = "${CLIENT_SECRET}",
             -- default iat_slack is 120 which is insufficient.
             iat_slack = 600,
             -- if graph API will be called, uncomment next line.
             -- authorization_params = { resource="https://graph.windows.net" },
             -- scope = "openid email profile",
             -- Refresh the user id_token after 900 seconds without requiring re-authentication
             -- refresh_session_interval = 900,
             -- redirect_uri_scheme = "https",
             -- logout_path = "/logout",
             -- redirect_after_logout_uri = "/",
             -- redirect_after_logout_with_id_token_hint = true,
             -- token_endpoint_auth_method = ["client_secret_basic"|"client_secret_post"],
             -- ssl_verify = "no"
             -- access_token_expires_in = 3600
             -- Default lifetime in seconds of the access_token if no expires_in attribute is present in the token 
             -- endpoint response.
             -- This plugin will silently renew the access_token once it is expired if refreshToken scope is present.
             -- access_token_expires_leeway = 0
             -- Expiration leeway for access_token renewal.
             -- If this is set, renewal will happen access_token_expires_leeway seconds before the token expiration.
             -- This avoids errors in case the access_token just expires when arriving to the OAuth Resoource Server.
             -- force_reauthorize = false
             -- when force_reauthorize is set to true the authorization flow will be executed even if a token has been cached already
          }

          -- call authenticate for OpenID Connect user authentication
          local res, err = require("resty.openidc").authenticate(opts)

          if err then
            ngx.status = 500
            ngx.say(err)
            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
          end

          -- at this point res is a Lua table with 3 keys:
          --   id_token    : a Lua table with the claims from the id_token (required)
          --   access_token: the access token (optional)
          --   user        : a Lua table with the claims returned from the user info endpoint (optional)

          --if res.id_token.hd ~= "pingidentity.com" then
          --  ngx.exit(ngx.HTTP_FORBIDDEN)
          --end

          --if res.user.email ~= "hans.zandbelt@zmartzone.eu" then
          --  ngx.exit(ngx.HTTP_FORBIDDEN)
          --end

          -- set headers with user info: this will overwrite any existing headers
          -- but also scrub(!) them in case no value is provided in the token
          ngx.req.set_header("X-USER", res.id_token.sub)
      ';

      proxy_pass http://localhost:8080;
    }
  }
}